- name: Configure Jenkins Master
  hosts: jenkins-master
  vars:
    ansible_ssh_private_key_file: /home/ec2-user/.ssh/devops_final.pem  # Path to your private key
    ansible_user: ec2-user                                  # SSH username
  tasks:
    # Update dnf packages
    - name: Update system packages
      dnf:
        update_cache: yes
      become: true
    # Install Jenkins
    - name: Install Jenkins
      get_url:
        url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
        dest: /etc/yum.repos.d/jenkins.repo
      become: true
    - name: Import Jenkins Key
      command: rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
      become: true
    - name: Upgrade system packages
      command: dnf upgrade -y
      become: true
    # Add required dependencies for the jenkins package
    - name: Install Java
      dnf:
        name:
          - fontconfig
          - java-17-amazon-corretto
        state: present
      become: true

    - name: Install Jenkins
      dnf:
        name: jenkins
        state: present
      become: true
    - name: Reload daemon 
      command: systemctl daemon-reload
      become: true
    # Start and Enable Jenkins
    - name: Enable Jenkins
      service:
        name: jenkins
        state: started
        enabled: yes
      become: true

- name: Configure Jenkins Worker
  hosts: jenkins-worker
  vars:
    ansible_ssh_private_key_file: /home/ec2-user/.ssh/devops_final.pem  # Path to your private key
    ansible_user: ec2-user                                  # SSH username
  tasks:
    # Update dnf packages
    - name: Update system packages
      dnf:
        update_cache: yes
      become: true
    # Install Jenkins
    - name: Install Jenkins
      get_url:
        url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
        dest: /etc/yum.repos.d/jenkins.repo
      become: true
    - name: Import Jenkins Key
      command: rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
      become: true
    - name: Upgrade system packages
      command: dnf upgrade -y
      become: true
    # Add required dependencies for the jenkins package
    - name: Install Java
      dnf: 
        name:
          - fontconfig
          - java-17-amazon-corretto
        state: present
      become: true
    - name: Install Jenkins
      dnf:
        name: jenkins
        state: present
      become: true
    - name: Reload daemon 
      command: systemctl daemon-reload
      become: true
    # Start and Enable Jenkins
    - name: Enable Jenkins
      service:
        name: jenkins
        state: started
        enabled: yes
      become: true


- name: Install Kubernetes (Kubeadm/Kubelet/Kubectl) on Ubuntu 24.04 with Calico
  hosts: kubernetes
  become: yes
  vars:
    # Provide this to your worker nodes so they can join automatically.
    # Example:
    #   kubeadm_join_cmd: "kubeadm join 1.2.3.4:6443 --token <xyz> --discovery-token-ca-cert-hash sha256:<hash> ..."
    kubeadm_join_cmd: ""

    # Specify which Pod CIDR Calico should use. 
    # Default is 192.168.0.0/16, but feel free to change.
    pod_network_cidr: "192.168.0.0/16"

  tasks:
    ########################################################################
    # 1. Update & Install Dependencies                                     #
    ########################################################################
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install base packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: present

    ########################################################################
    # 2. Disable Swap (Kubernetes Requirement)                             #
    ########################################################################
    - name: Remove swap entry from /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: '(^[^#].*\s+swap\s+)'
        state: absent

    - name: Disable swap at runtime
      command: swapoff -a
      # Only runs if any swap is actually on
      when: ansible_swaptotal_mb > 0

    ########################################################################
    # 3. Kernel Modules and Sysctl for K8s                                 #
    ########################################################################
    - name: Enable br_netfilter module
      modprobe:
        name: br_netfilter
        state: present

    - name: Set sysctl parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables',  value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }

    ########################################################################
    # 4. Install containerd (CRI)                                          #
    ########################################################################
    - name: Install containerd
      apt:
        name: containerd
        state: present
    
    - name: Ensure /etc/containerd directory exists
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'


    - name: Configure containerd (systemd cgroup)
      # Simple minimal config; you can customize further as needed
      copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              systemd_cgroup = true
      notify: 
        - restart containerd
      # The file is overwritten each time, but if it doesn't change content, 
      # the "notify" won't restart containerd unnecessarily.

    - name: Enable and start containerd
      systemd:
        name: containerd
        enabled: true
        state: started

    ########################################################################
    # 5. Add Kubernetes Apt Repo & Install Kubeadm, Kubelet, Kubectl       #
    ########################################################################
    - name: Add GPG key for Kubernetes apt repo
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    # Even for Ubuntu 24.04, the official docs still say to use 'kubernetes-xenial main'
    - name: Add Kubernetes apt repo
      apt_repository:
        repo: "deb [trusted=yes] https://apt.kubernetes.io/ kubernetes-xenial main"
        state: present
        filename: "kubernetes.list"
    
        

    - name: Install kubeadm, kubelet, and kubectl
      apt:
        name:
          - kubeadm
          - kubelet
          - kubectl
        state: present
        update_cache: yes

    - name: Hold kube packages (prevent unexpected auto-upgrades)
      apt:
        name:
          - kubeadm
          - kubelet
          - kubectl
        state: present
        mark_hold: yes

    - name: Enable kubelet service (don't start yet)
      systemd:
        name: kubelet
        enabled: true
        state: stopped

    ########################################################################
    # 6. Initialize Control Plane (On Master Only)                         #
    ########################################################################
    - name: "Kubeadm init (Master)"
      command: kubeadm init --pod-network-cidr={{ pod_network_cidr }}
      args:
        creates: /etc/kubernetes/admin.conf  # if this file exists, skip
      register: master_init
      when: "'kubernetes_master' in group_names"

    - name: Create .kube directory for ec2-user
      file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'
      when: "'kubernetes_master' in group_names"

    - name: Copy admin.conf to ec2-user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        owner: ubuntu
        group: ubuntu
        mode: '0600'
      when: "'kubernetes_master' in group_names"

    ########################################################################
    # 7. Install Calico CNI (Master)                                       #
    ########################################################################
    - name: Apply Calico network
      command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
      when:
        - "'kubernetes_master' in group_names"
        - master_init.changed  # Only run if init was just done

    ########################################################################
    # 8. Join Worker Nodes (Agents)                                        #
    ########################################################################
    - name: Join cluster (Agent nodes)
      command: "{{ kubeadm_join_cmd }}"
      # The 'creates' check so we don't rejoin if node is already part of the cluster
      args:
        creates: /etc/kubernetes/kubelet.conf
      when:
        - "'kubernetes_agents' in group_names"
        - kubeadm_join_cmd != ""

  handlers:
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted


